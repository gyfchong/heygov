// =====================================================================
// STYLES
// ---
// Following the philosophy of @CSSwizadry's transparent ui namespaces
// http://csswizardry.com/2015/03/more-transparent-ui-code-with-namespaces/
// =====================================================================

// Fonts
@import url(http://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,800italic,700,300,600,800,400);

// Globals

@import "vendor/*";
@import "vendor/font-awesome/font-awesome";

@import "variables";

@import "global";


// =====================================================================
// UTILITIES
// ---------------------------------------------------------------------
// u-: Signify that this class is a Utility class. It has a very specific
// role (often providing only one declaration) and should not be bound onto
// or changed. It can be reused and is not tied to any specific piece of UI.
// You will probably recognise this namespace from libraries and methodologies
// like SUIT. (eg. .u-utility-class, .u-clearfix)
// ---
// http://csswizardry.com/2015/03/more-transparent-ui-code-with-namespaces/
// =====================================================================
@import "utilities";



// =====================================================================
// THEMES
// ---------------------------------------------------------------------
// t-: Signify that a class is responsible for adding a Theme to a view.
// It lets us know that UI Components’ current cosmetic appearance may
// be due to the presence of a theme.
// (eg. .t-theme-name, .t-light)
// =====================================================================
@import "themes/*";



// =====================================================================
// OBJECTS
// ---------------------------------------------------------------------
// o-: Signify that something is an Object, and that it may be used in
// any number of unrelated contexts to the one you can currently see it
// in. Making modifications to these types of class could potentially have
// knock-on effects in a lot of other unrelated places. Tread carefully.
// (eg. .o-object-name, .o-layout)
// =====================================================================
@import "objects/*";



// =====================================================================
// COMPONTENTS
// ---------------------------------------------------------------------
// c-: Signify that something is a Component. This is a concrete,
// implementation-specific piece of UI. All of the changes you make to
// its styles should be detectable in the context you’re currently looking
// at. Modifying these styles should be safe and have no side effects.
// (eg. .c-component-name, .c-hero-banner)
// =====================================================================
@import "components/*";


